import { createSlice, PayloadAction } from "@reduxjs/toolkit";

import { IdType, MediaFile } from "./librarySlice";


export interface Track {
  albumId: IdType;
  mediaFile: MediaFile;
}

export interface PlaybackStatus {
  isPlaying: boolean;
  isBuffering: boolean;
  didJustFinish: boolean;
  positionMillis: number;
  durationMillis?: number;
  error?: string;
}

export type RepeatMode = 'none' | 'one' | 'all';

export interface PlayerState {
  currentTrack?: Track;
  playbackStatus: PlaybackStatus;
  albumQueue: Track[];
  queue: Track[];
  prev: Track[];
  next: Track[];
  repeatMode: RepeatMode;
  shuffle: boolean;
}

const initialState: PlayerState = {
  currentTrack: undefined,
  playbackStatus: {
    isPlaying: false,
    isBuffering: false,
    didJustFinish: false,
    positionMillis: 0,
    durationMillis: undefined,
    error: undefined,
  },
  albumQueue: [],
  queue: [],
  prev: [],
  next: [],
  repeatMode: "none",
  shuffle: false,
};

const playerSlice = createSlice({
  name: 'player',
  initialState,
  reducers: {
    loadTrack: () => {},
    updatePlaybackStatus: () => {},
    queue: () => {},
    play: () => {},
    pause: () => {},
    next: () => {},
    previous: () => {},
    toggleShuffle: () => {},
    toggleRepeat: () => {},
    resetPlayer: () => {},
  },
});

export const {
  //
} = playerSlice.actions;

export default playerSlice.reducer;